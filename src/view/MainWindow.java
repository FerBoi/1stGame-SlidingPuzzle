/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package view;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Image;
import java.awt.Insets;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.util.Timer;
import javax.swing.SwingUtilities;

/**
 *
 * @author Fernando GJ
 */
public class MainWindow extends javax.swing.JFrame {
    private Timer timer;
    private int seconds;
    private boolean timerPause;
    private int totalMovsDone;

    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents(); 
        
        this.timer = new Timer();
        this.setIconImage(new ImageIcon(this.getClass().getResource("/src/programIcon.png")).getImage());
        this.createOptions();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cardPanel = new javax.swing.JPanel();
        gameOptionPanel = new javax.swing.JPanel();
        gamePanel = new javax.swing.JPanel();
        northPanel = new javax.swing.JPanel();
        time = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        movements = new javax.swing.JLabel();
        movementsLabel = new javax.swing.JLabel();
        previewImg = new javax.swing.JLabel();
        leftPanel = new javax.swing.JPanel();
        instructionsPanel = new javax.swing.JPanel();
        labelUp = new javax.swing.JLabel();
        labelRight = new javax.swing.JLabel();
        labelLeft = new javax.swing.JLabel();
        labelBottom = new javax.swing.JLabel();
        inputWordMov = new javax.swing.JTextField();
        mvbLabel = new javax.swing.JLabel();
        puzzlePanel = new view.Puzzle();
        instructsPanel = new javax.swing.JPanel();
        northView = new javax.swing.JPanel();
        titleNorthView = new javax.swing.JLabel();
        timerExplain = new javax.swing.JLabel();
        counterExplain = new javax.swing.JLabel();
        counterExplain1 = new javax.swing.JLabel();
        imagePrevExplain = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        eastView = new javax.swing.JPanel();
        titleEastView = new javax.swing.JLabel();
        constrolsExplain = new javax.swing.JLabel();
        movInput = new javax.swing.JLabel();
        movInput1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sliding Puzzle");

        cardPanel.setLayout(new java.awt.CardLayout());

        gameOptionPanel.setLayout(new java.awt.GridBagLayout());
        cardPanel.add(gameOptionPanel, "card2");

        gamePanel.setLayout(new java.awt.BorderLayout());

        time.setText("TIME:");

        timeLabel.setText("00:00:00");

        movements.setText("MOVEMENTS:");

        movementsLabel.setText("0");

        javax.swing.GroupLayout northPanelLayout = new javax.swing.GroupLayout(northPanel);
        northPanel.setLayout(northPanelLayout);
        northPanelLayout.setHorizontalGroup(
            northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(northPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(time)
                .addGap(18, 18, 18)
                .addComponent(timeLabel)
                .addGap(55, 55, 55)
                .addComponent(movements)
                .addGap(18, 18, 18)
                .addComponent(movementsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 237, Short.MAX_VALUE)
                .addComponent(previewImg, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(136, Short.MAX_VALUE))
        );
        northPanelLayout.setVerticalGroup(
            northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(northPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(time)
                    .addComponent(timeLabel)
                    .addComponent(movements)
                    .addComponent(movementsLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(northPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(previewImg, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gamePanel.add(northPanel, java.awt.BorderLayout.PAGE_START);

        instructionsPanel.setLayout(new javax.swing.BoxLayout(instructionsPanel, javax.swing.BoxLayout.Y_AXIS));

        labelUp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelUp.setText("TOP - 'w'");
        instructionsPanel.add(labelUp);

        labelRight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRight.setText("RIGHT - 'd'");
        instructionsPanel.add(labelRight);

        labelLeft.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelLeft.setText("LEFT - 'a'");
        instructionsPanel.add(labelLeft);

        labelBottom.setText("BOTTOM - 's'");
        instructionsPanel.add(labelBottom);

        inputWordMov.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 0, 51), new java.awt.Color(255, 0, 51), null, null));
        inputWordMov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputWordMovActionPerformed(evt);
            }
        });

        mvbLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mvbLabel.setText("MOVEMENT");

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputWordMov)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(instructionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(mvbLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(instructionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addComponent(mvbLabel)
                .addGap(48, 48, 48)
                .addComponent(inputWordMov, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        gamePanel.add(leftPanel, java.awt.BorderLayout.LINE_END);

        javax.swing.GroupLayout puzzlePanelLayout = new javax.swing.GroupLayout(puzzlePanel);
        puzzlePanel.setLayout(puzzlePanelLayout);
        puzzlePanelLayout.setHorizontalGroup(
            puzzlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 708, Short.MAX_VALUE)
        );
        puzzlePanelLayout.setVerticalGroup(
            puzzlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
        );

        gamePanel.add(puzzlePanel, java.awt.BorderLayout.CENTER);

        cardPanel.add(gamePanel, "card3");

        instructsPanel.setLayout(new java.awt.GridLayout(1, 2, 10, 10));

        titleNorthView.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleNorthView.setText("Â¿WHAT WILL YOU SEE IN THE NORTH SIDE?");

        timerExplain.setText("- Timer: It represents the time of game");

        counterExplain.setText("- Movements Counter: It represents the number");

        counterExplain1.setText("of movements that the player has done");

        imagePrevExplain.setText("- Image preview: It represents the puzzle image");

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/back.png"))); // NOI18N
        backBtn.setBorder(null);
        backBtn.setBorderPainted(false);
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout northViewLayout = new javax.swing.GroupLayout(northView);
        northView.setLayout(northViewLayout);
        northViewLayout.setHorizontalGroup(
            northViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleNorthView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(northViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(northViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(northViewLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(counterExplain1))
                    .addComponent(timerExplain)
                    .addComponent(counterExplain)
                    .addComponent(imagePrevExplain)
                    .addComponent(backBtn))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        northViewLayout.setVerticalGroup(
            northViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(northViewLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addComponent(titleNorthView)
                .addGap(18, 18, 18)
                .addComponent(timerExplain)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(counterExplain)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(counterExplain1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(imagePrevExplain)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        instructsPanel.add(northView);

        titleEastView.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleEastView.setText("Â¿WHAT WILL YOU SEE IN THE EAST SIDE?");

        constrolsExplain.setText("- Controls: W - UP, A - LEFT, D - RIGHT, S - DOWN");

        movInput.setText("- Movement input: Write w/a/s/d and the movement");

        movInput1.setText("from the white piece will be done");

        javax.swing.GroupLayout eastViewLayout = new javax.swing.GroupLayout(eastView);
        eastView.setLayout(eastViewLayout);
        eastViewLayout.setHorizontalGroup(
            eastViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eastViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eastViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleEastView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(eastViewLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(eastViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(eastViewLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(movInput1))
                            .addComponent(movInput)
                            .addComponent(constrolsExplain))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)))
                .addContainerGap())
        );
        eastViewLayout.setVerticalGroup(
            eastViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eastViewLayout.createSequentialGroup()
                .addContainerGap(158, Short.MAX_VALUE)
                .addComponent(titleEastView)
                .addGap(18, 18, 18)
                .addComponent(constrolsExplain)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(movInput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(movInput1)
                .addContainerGap(166, Short.MAX_VALUE))
        );

        instructsPanel.add(eastView);

        cardPanel.add(instructsPanel, "card4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputWordMovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputWordMovActionPerformed
        if (this.inputWordMov.getText().length() == 1) {
            char charPressed = this.inputWordMov.getText().charAt(0);

            if (charPressed == 'w' || charPressed == 'a' || charPressed == 's' || charPressed == 'd') {
                boolean moveDone = false;

                switch (charPressed) {
                    case 'w' ->
                        moveDone = this.puzzlePanel.move(MoveDirection.UP);
                    case 'd' ->
                        moveDone = this.puzzlePanel.move(MoveDirection.RIGHT);
                    case 'a' ->
                        moveDone = this.puzzlePanel.move(MoveDirection.LEFT);
                    case 's' ->
                        moveDone = this.puzzlePanel.move(MoveDirection.DOWN);
                }

                if (!moveDone) {
                    this.timerPause = true;
                    JOptionPane.showConfirmDialog(this, "Invalid move!", "ERROR",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                    this.timerPause = false;
                } else {
                    if (this.puzzlePanel.hasWon()) {
                        this.timer.cancel();

                        if (JOptionPane.showConfirmDialog(this, "You have won! Â¿Reset?", "CONGRATS",
                                JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE) == JOptionPane.YES_OPTION) {
                            this.puzzlePanel.reset();
                            this.seconds = 0;
                            this.timer = new Timer();
                            this.createTimerTask();
                        }
                    } else
                        this.movementsLabel.setText(++this.totalMovsDone + "");
                }
            }
        } else {
            this.timerPause = true;
            JOptionPane.showConfirmDialog(this, "Please, insert any valid letter", "ERROR",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            this.timerPause = false;
        }
        
        this.inputWordMov.setText("");
    }//GEN-LAST:event_inputWordMovActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        this.updatePanel(this.gameOptionPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void updatePanel(JPanel newPanel) {
        this.cardPanel.removeAll();
        this.cardPanel.add(newPanel);
        
        this.cardPanel.revalidate();
        this.cardPanel.repaint();
    }
    
    private void createOptions() {
        // Configuramos el panel principal con un GridBagLayout
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(20, 0, 20, 0); // Espacio dinÃ¡mico entre los botones
        gbc.gridx = 0;

        JButton[] btns = new JButton[] {new JButton("NEW GAME"), new JButton("INSTRUCTIONS"), new JButton("EXIT")};

        for (int i = 0; i < btns.length; i++) {
            btns[i].setMinimumSize(new Dimension(120, 30));
            btns[i].setPreferredSize(new Dimension(200, 50));

            gbc.gridy = i;
            
            final int forLambda = i;
            
            btns[i].addActionListener(e -> {
                if (forLambda == 0) {
                    OpenFile jDialogOpenFile = new OpenFile(this, true);

                    jDialogOpenFile.setLocationRelativeTo(null);
                    jDialogOpenFile.setVisible(true);
                } else if (forLambda == 1)
                    this.updatePanel(this.instructsPanel);
                else
                    System.exit(0);
            });
            
            this.gameOptionPanel.add(btns[i], gbc);
        }
    }
    
    private void createTimerTask() {
        this.timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (!timerPause) {
                    seconds++;

                    int hours = seconds / 3600;
                    int minutes = (seconds % 3600) / 60;
                    int seg = seconds % 60;

                    SwingUtilities.invokeLater(() -> {
                        String formatedTime = String.format("%02d:%02d:%02d", hours, minutes, seg);
                        timeLabel.setText(formatedTime);
                    });
                }
            }
        }, 0, 1000);
    }
    
    public void createPuzzle(File imgFile, Image puzzleImg, BufferedImage selectedImg) {
        this.puzzlePanel.createPuzzle(selectedImg);
        puzzleImg = puzzleImg.getScaledInstance(this.previewImg.getWidth(),
                this.previewImg.getHeight(), Image.SCALE_SMOOTH);
        
        this.previewImg.setIcon(new ImageIcon(puzzleImg));
        this.previewImg.setToolTipText("<html><img src='file:" + imgFile.getAbsolutePath() + "' width='" + (selectedImg.getWidth() / 2)
                + "' height='" + (selectedImg.getHeight() / 2) + "'></html>");
        this.updatePanel(this.gamePanel);
        this.createTimerTask();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JLabel constrolsExplain;
    private javax.swing.JLabel counterExplain;
    private javax.swing.JLabel counterExplain1;
    private javax.swing.JPanel eastView;
    private javax.swing.JPanel gameOptionPanel;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JLabel imagePrevExplain;
    private javax.swing.JTextField inputWordMov;
    private javax.swing.JPanel instructionsPanel;
    private javax.swing.JPanel instructsPanel;
    private javax.swing.JLabel labelBottom;
    private javax.swing.JLabel labelLeft;
    private javax.swing.JLabel labelRight;
    private javax.swing.JLabel labelUp;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JLabel movInput;
    private javax.swing.JLabel movInput1;
    private javax.swing.JLabel movements;
    private javax.swing.JLabel movementsLabel;
    private javax.swing.JLabel mvbLabel;
    private javax.swing.JPanel northPanel;
    private javax.swing.JPanel northView;
    private javax.swing.JLabel previewImg;
    private view.Puzzle puzzlePanel;
    private javax.swing.JLabel time;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel timerExplain;
    private javax.swing.JLabel titleEastView;
    private javax.swing.JLabel titleNorthView;
    // End of variables declaration//GEN-END:variables

} // end MainWindow